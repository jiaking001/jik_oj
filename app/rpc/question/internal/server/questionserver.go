// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3
// Source: question.proto

package server

import (
	"context"

	"app/rpc/question/internal/logic"
	"app/rpc/question/internal/svc"
	"app/rpc/question/types/question"
)

type QuestionServer struct {
	svcCtx *svc.ServiceContext
	question.UnimplementedQuestionServer
}

func NewQuestionServer(svcCtx *svc.ServiceContext) *QuestionServer {
	return &QuestionServer{
		svcCtx: svcCtx,
	}
}

// -----------------------题目-----------------------
func (s *QuestionServer) AddQuestion(ctx context.Context, in *question.AddQuestionReq) (*question.AddQuestionResp, error) {
	l := logic.NewAddQuestionLogic(ctx, s.svcCtx)
	return l.AddQuestion(in)
}

func (s *QuestionServer) UpdateQuestion(ctx context.Context, in *question.UpdateQuestionReq) (*question.UpdateQuestionResp, error) {
	l := logic.NewUpdateQuestionLogic(ctx, s.svcCtx)
	return l.UpdateQuestion(in)
}

func (s *QuestionServer) DelQuestion(ctx context.Context, in *question.DelQuestionReq) (*question.DelQuestionResp, error) {
	l := logic.NewDelQuestionLogic(ctx, s.svcCtx)
	return l.DelQuestion(in)
}

func (s *QuestionServer) GetQuestionById(ctx context.Context, in *question.GetQuestionByIdReq) (*question.GetQuestionByIdResp, error) {
	l := logic.NewGetQuestionByIdLogic(ctx, s.svcCtx)
	return l.GetQuestionById(in)
}

func (s *QuestionServer) SearchQuestion(ctx context.Context, in *question.SearchQuestionReq) (*question.SearchQuestionResp, error) {
	l := logic.NewSearchQuestionLogic(ctx, s.svcCtx)
	return l.SearchQuestion(in)
}
